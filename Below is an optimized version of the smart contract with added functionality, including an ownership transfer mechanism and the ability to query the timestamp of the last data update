// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract AdvancedSmartContract {
    address private owner;
    uint256 private data;
    uint256 private lastUpdateTime;

    event DataUpdated(uint256 newData, uint256 timestamp);
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can call this function");
        _;
    }

    constructor(uint256 initialData) {
        owner = msg.sender;
        data = initialData;
        lastUpdateTime = block.timestamp;
    }

    function updateData(uint256 newData) external onlyOwner {
        require(newData != data, "New data must be different from current data");
        data = newData;
        lastUpdateTime = block.timestamp;
        emit DataUpdated(newData, lastUpdateTime);
    }

    function getData() external view returns (uint256, uint256) {
        return (data, lastUpdateTime);
    }

    function transferOwnership(address newOwner) external onlyOwner {
        require(newOwner != address(0), "Invalid new owner address");
        require(newOwner != owner, "The new owner is the current owner");
        emit OwnershipTransferred(owner, newOwner);
        owner = newOwner;
    }
}
